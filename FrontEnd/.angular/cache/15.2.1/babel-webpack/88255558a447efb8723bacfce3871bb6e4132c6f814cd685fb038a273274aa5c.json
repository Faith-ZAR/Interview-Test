{"ast":null,"code":"import _defineProperty from \"C:/Users/User/source/repos/Faith-ZAR/Interview-Test/FrontEnd/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\nimport { environment } from 'environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  // API\n\n  constructor(http) {\n    _defineProperty(this, \"http\", void 0);\n    _defineProperty(this, \"apiURL\", environment.baseUrl);\n    /*========================================\r\n      Consuming RESTful API\r\n    =========================================*/\n    // Http Options\n    _defineProperty(this, \"httpOptions\", {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    });\n    this.http = http;\n  }\n  // HttpClient API get() method => Fetch heroes list\n  getHeroes() {\n    return this.http.get(this.apiURL + '/api/heroes').pipe(retry(1), catchError(this.handleError));\n  }\n  // HttpClient API get() method => Fetch hero\n  getHero(name) {\n    return this.http.get(this.apiURL + '/api/heroes/' + name).pipe(retry(1), catchError(this.handleError));\n  }\n  /*\r\n  // HttpClient API put() method => Update hero\r\n  evolveHero(id, hero): Observable<Hero> {\r\n    console.log('--------------------');\r\n        console.log(id, hero);\r\n    return this.http.put<Hero>(this.apiURL + '/api/heroes/' + id, JSON.stringify(hero), this.httpOptions)\r\n    .pipe(\r\n      retry(1),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n  */\n  // HttpClient API put() method => Update Hero\n  evolveHero(id, hero) {\n    return this.http.put(this.apiURL + '/api/heroes/' + id, hero[0], this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n  // HttpClient API delete() method => Delete hero\n  deleteHero(id) {\n    return this.http.delete(this.apiURL + '/api/heroes/' + id, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n  // Error handling\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(errorMessage);\n  }\n}\n_defineProperty(ApiService, \"\\u0275fac\", function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n});\n_defineProperty(ApiService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n}));","map":{"version":3,"mappings":";AACA,SAASA,UAAU,EAAEC,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,KAAK,EAAEC,UAAU,QAAQ,gBAAgB;AAClD,SAASC,WAAW,QAAQ,0BAA0B;;;AAKtD,OAAM,MAAOC,UAAU;EAErB;;EAGAC,YAAoBC,IAAgB;IAAA;IAAA,gCAF3BH,WAAW,CAACI,OAAO;IAI5B;;;IAIA;IAAA,qCACc;MACZC,OAAO,EAAE,IAAIT,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;IAXmB,SAAI,GAAJO,IAAI;EAAgB;EAaxC;EACAG,SAAS;IACP,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAO,IAAI,CAACC,MAAM,GAAG,aAAa,CAAC,CACtDC,IAAI,CACHX,KAAK,CAAC,CAAC,CAAC,EACRC,UAAU,CAAC,IAAI,CAACW,WAAW,CAAC,CAC7B;EACH;EAEA;EACAC,OAAO,CAACC,IAAI;IACV,OAAO,IAAI,CAACT,IAAI,CAACI,GAAG,CAAO,IAAI,CAACC,MAAM,GAAG,cAAc,GAAGI,IAAI,CAAC,CAC9DH,IAAI,CACHX,KAAK,CAAC,CAAC,CAAC,EACRC,UAAU,CAAC,IAAI,CAACW,WAAW,CAAC,CAC7B;EACH;EAEA;;;;;;;;;;;;EAcA;EACAG,UAAU,CAACC,EAAE,EAAEC,IAAI;IACjB,OAAO,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAO,IAAI,CAACR,MAAM,GAAG,cAAc,GAAGM,EAAE,EAAEC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAACE,WAAW,CAAC,CACvFR,IAAI,CACHX,KAAK,CAAC,CAAC,CAAC,EACRC,UAAU,CAAC,IAAI,CAACW,WAAW,CAAC,CAC7B;EACH;EAEA;EACAQ,UAAU,CAACJ,EAAE;IACX,OAAO,IAAI,CAACX,IAAI,CAACgB,MAAM,CAAO,IAAI,CAACX,MAAM,GAAG,cAAc,GAAGM,EAAE,EAAE,IAAI,CAACG,WAAW,CAAC,CACjFR,IAAI,CACHX,KAAK,CAAC,CAAC,CAAC,EACRC,UAAU,CAAC,IAAI,CAACW,WAAW,CAAC,CAC7B;EACH;EAEA;EACAA,WAAW,CAACU,KAAK;IACd,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM;MACL;MACAF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAEzEE,MAAM,CAACC,KAAK,CAACL,YAAY,CAAC;IAC1B,OAAOxB,UAAU,CAACwB,YAAY,CAAC;EAClC;;gBAhFWpB,UAAU;mBAAVA,UAAU;AAAA;AAAA,gBAAVA,UAAU;SAAVA,UAAU;EAAA0B,SAAV1B,UAAU;EAAA2B,YAFT;AAAM","names":["HttpClient","HttpHeaders","throwError","retry","catchError","environment","ApiService","constructor","http","baseUrl","headers","getHeroes","get","apiURL","pipe","handleError","getHero","name","evolveHero","id","hero","put","httpOptions","deleteHero","delete","error","errorMessage","ErrorEvent","message","status","window","alert","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\User\\source\\repos\\Faith-ZAR\\Interview-Test\\FrontEnd\\src\\app\\shared\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Hero } from '../shared/hero';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { retry, catchError } from 'rxjs/operators';\r\nimport { environment } from 'environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n\r\n  // API\r\n  apiURL = environment.baseUrl;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  /*========================================\r\n    Consuming RESTful API\r\n  =========================================*/\r\n\r\n  // Http Options\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json'\r\n    })\r\n  };\r\n\r\n  // HttpClient API get() method => Fetch heroes list\r\n  getHeroes(): Observable<Hero> {\r\n    return this.http.get<Hero>(this.apiURL + '/api/heroes')\r\n    .pipe(\r\n      retry(1),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // HttpClient API get() method => Fetch hero\r\n  getHero(name): Observable<Hero> {\r\n    return this.http.get<Hero>(this.apiURL + '/api/heroes/' + name)\r\n    .pipe(\r\n      retry(1),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  /*\r\n  // HttpClient API put() method => Update hero\r\n  evolveHero(id, hero): Observable<Hero> {\r\n    console.log('--------------------');\r\n\r\n    console.log(id, hero);\r\n    return this.http.put<Hero>(this.apiURL + '/api/heroes/' + id, JSON.stringify(hero), this.httpOptions)\r\n    .pipe(\r\n      retry(1),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n  */\r\n\r\n  // HttpClient API put() method => Update Hero\r\n  evolveHero(id, hero): Observable<Hero> {\r\n    return this.http.put<Hero>(this.apiURL + '/api/heroes/' + id, hero[0], this.httpOptions)\r\n    .pipe(\r\n      retry(1),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // HttpClient API delete() method => Delete hero\r\n  deleteHero(id) {\r\n    return this.http.delete<Hero>(this.apiURL + '/api/heroes/' + id, this.httpOptions)\r\n    .pipe(\r\n      retry(1),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Error handling\r\n  handleError(error) {\r\n     let errorMessage = '';\r\n     if (error.error instanceof ErrorEvent) {\r\n       // Get client-side error\r\n       errorMessage = error.error.message;\r\n     } else {\r\n       // Get server-side error\r\n       errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n     }\r\n     window.alert(errorMessage);\r\n     return throwError(errorMessage);\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}